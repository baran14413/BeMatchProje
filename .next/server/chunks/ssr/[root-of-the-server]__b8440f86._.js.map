{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wSACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/stylize-image-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI flow for stylizing an image based on a text prompt.\n *\n * - stylizeImage - Applies a style to an image based on a text prompt.\n * - StylizeImageInput - The input type for the stylizeImage function.\n * - StylizeImageOutput - The return type for the stylizeImage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst StylizeImageInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"The original photo to be stylized, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  prompt: z.string().describe('The text prompt describing the desired style.'),\n});\nexport type StylizeImageInput = z.infer<typeof StylizeImageInputSchema>;\n\nconst StylizeImageOutputSchema = z.object({\n  stylizedImageDataUri: z\n    .string()\n    .optional()\n    .describe('The stylized image as a Base64 encoded data URI.'),\n  error: z\n    .string()\n    .optional()\n    .describe('An error message if the stylization failed.'),\n});\nexport type StylizeImageOutput = z.infer<typeof StylizeImageOutputSchema>;\n\nexport async function stylizeImage(\n  input: StylizeImageInput\n): Promise<StylizeImageOutput> {\n  return stylizeImageFlow(input);\n}\n\nconst stylizeImageFlow = ai.defineFlow(\n  {\n    name: 'stylizeImageFlow',\n    inputSchema: StylizeImageInputSchema,\n    outputSchema: StylizeImageOutputSchema,\n  },\n  async ({photoDataUri, prompt}) => {\n    try {\n      const {media} = await ai.generate({\n        model: 'googleai/gemini-2.0-flash-preview-image-generation',\n        prompt: [\n          {media: {url: photoDataUri}},\n          {text: `Apply the following style to the image: ${prompt}`},\n        ],\n        config: {\n          responseModalities: ['TEXT', 'IMAGE'],\n        },\n      });\n\n      if (!media?.url) {\n        throw new Error('The model did not return an image.');\n      }\n\n      return {stylizedImageDataUri: media.url};\n    } catch (e: any) {\n      console.error('Image stylization flow failed', e);\n      return {\n        error:\n          'Görsel stili uygulanırken bir hata oluştu. Lütfen tekrar deneyin.',\n      };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;;IAkCsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/moderate-image-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI flow for moderating uploaded images.\n *\n * - moderateImage - Checks if an image is appropriate for a profile picture.\n * - ModerateImageInput - The input type for the moderateImage function.\n * - ModerateImageOutput - The return type for the moderateImage function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ModerateImageInputSchema = z.object({\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo to be moderated, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type ModerateImageInput = z.infer<typeof ModerateImageInputSchema>;\n\nconst ModerateImageOutputSchema = z.object({\n  isSafe: z.boolean().describe('Whether the image is considered safe and appropriate for a profile picture.'),\n  reason: z.string().optional().describe('The reason why the image was flagged as not safe. Only present if isSafe is false.'),\n});\nexport type ModerateImageOutput = z.infer<typeof ModerateImageOutputSchema>;\n\nexport async function moderateImage(input: ModerateImageInput): Promise<ModerateImageOutput> {\n  return moderateImageFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'moderateImagePrompt',\n  input: {schema: ModerateImageInputSchema},\n  output: {schema: ModerateImageOutputSchema},\n  model: 'googleai/gemini-1.5-flash',\n  system: `You are an expert image moderator for a dating application.\nYou need to determine if the provided image is appropriate for a user's profile picture.\n\nThe image should be flagged as NOT SAFE if it contains any of the following:\n- Nudity or sexually suggestive content.\n- Violence, gore, or weapons.\n- Hateful symbols or gestures.\n- Illegal activities or substances.\n- Is not a real photo (e.g., a cartoon, illustration, or meme).\n- Does not contain a person.\n\nIf the image is safe, set isSafe to true.\nIf the image is not safe, set isSafe to false and provide a brief, user-friendly reason in Turkish.`,\n  prompt: `Please moderate this image: {{media url=photoDataUri}}`,\n});\n\nconst moderateImageFlow = ai.defineFlow(\n  {\n    name: 'moderateImageFlow',\n    inputSchema: ModerateImageInputSchema,\n    outputSchema: ModerateImageOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IA2BsB,gBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\nexport { app, auth, db, storage };\n"],"names":[],"mappings":";;;;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,UAAU;IACV,SAAS;IACT,aAAa;IACb,iBAAiB;IACjB,KAAK;IACL,aAAa;AACf;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAC,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE,kBAAkB,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD;AACrE,MAAM,OAAO,CAAA,GAAA,yOAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE;AACxB,MAAM,UAAU,CAAA,GAAA,oLAAA,CAAA,aAAU,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/create/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useRef, ChangeEvent } from 'react';\nimport Image from 'next/image';\nimport { useRouter } from 'next/navigation';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  UploadCloud,\n  Loader2,\n  Wand2,\n  Check,\n  Image as ImageIcon,\n  Type,\n} from 'lucide-react';\nimport { stylizeImage } from '@/ai/flows/stylize-image-flow';\nimport { moderateImage } from '@/ai/flows/moderate-image-flow';\nimport { cn } from '@/lib/utils';\nimport { auth, db, storage } from '@/lib/firebase';\nimport { addDoc, collection, serverTimestamp } from 'firebase/firestore';\nimport { ref, uploadString, getDownloadURL } from 'firebase/storage';\n\n\n// Step 1: Choose post type\nconst Step1ChooseType = ({ onSelectType }: { onSelectType: (type: 'photo' | 'text') => void }) => (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader>\n        <CardTitle>Yeni Gönderi Oluştur</CardTitle>\n        <CardDescription>\n          Ne tür bir gönderi paylaşmak istersin?\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <Button variant=\"outline\" className=\"h-32 flex flex-col gap-2\" onClick={() => onSelectType('photo')}>\n            <ImageIcon className=\"w-8 h-8\" />\n            <span className=\"text-lg\">Fotoğraf Paylaş</span>\n        </Button>\n        <Button variant=\"outline\" className=\"h-32 flex flex-col gap-2\" onClick={() => onSelectType('text')}>\n            <Type className=\"w-8 h-8\" />\n            <span className=\"text-lg\">Yazı Yaz</span>\n        </Button>\n      </CardContent>\n    </Card>\n);\n\n// Step 2 (Photo): Upload\nconst Step2PhotoUpload = ({ onFileSelect }: { onFileSelect: (e: ChangeEvent<HTMLInputElement>) => void }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader>\n        <CardTitle>Adım 2: Fotoğraf Yükle</CardTitle>\n        <CardDescription>\n          Paylaşmak istediğin fotoğrafı seç.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div\n          className=\"flex flex-col items-center justify-center p-12 border-2 border-dashed rounded-lg cursor-pointer hover:bg-accent\"\n          onClick={() => fileInputRef.current?.click()}\n        >\n          <UploadCloud className=\"w-16 h-16 text-muted-foreground\" />\n          <p className=\"mt-4 text-lg font-semibold\">Fotoğraf Yükle</p>\n          <p className=\"text-sm text-muted-foreground\">\n            Sürükleyip bırakın veya tıklayın\n          </p>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\"image/*\"\n            className=\"hidden\"\n            onChange={onFileSelect}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Step 3 (Photo): Stylize & Share\nconst Step3PhotoShare = ({\n  imgSrc,\n  stylePrompt,\n  setStylePrompt,\n  caption,\n  setCaption,\n  isProcessing,\n  handleApplyStyle,\n  handleShare,\n  onBack,\n}: {\n  imgSrc: string;\n  stylePrompt: string;\n  setStylePrompt: (value: string) => void;\n  caption: string;\n  setCaption: (value: string) => void;\n  isProcessing: boolean;\n  handleApplyStyle: () => void;\n  handleShare: () => void;\n  onBack: () => void;\n}) => (\n  <Card className=\"w-full max-w-lg\">\n    <CardHeader>\n      <CardTitle>Adım 3: Düzenle ve Paylaş</CardTitle>\n      <CardDescription>\n        İsteğe bağlı olarak stil ve açıklama ekleyebilirsiniz.\n      </CardDescription>\n    </CardHeader>\n    <CardContent className=\"flex flex-col items-center gap-4\">\n      {imgSrc && (\n        <Image\n          alt=\"Preview\"\n          src={imgSrc}\n          width={500}\n          height={500}\n          className=\"max-h-[40vh] object-contain rounded-md\"\n        />\n      )}\n      <div className=\"w-full space-y-2\">\n        <Textarea\n          placeholder=\"İsteğe bağlı açıklama...\"\n          value={caption}\n          onChange={(e) => setCaption(e.target.value)}\n          className=\"min-h-[80px]\"\n        />\n      </div>\n       <div className=\"w-full space-y-2\">\n        <Textarea\n          placeholder=\"Yapay zeka stili ekle (Örn: bir Van Gogh tablosu gibi yap...)\"\n          value={stylePrompt}\n          onChange={(e) => setStylePrompt(e.target.value)}\n          disabled={isProcessing}\n          className=\"min-h-[80px]\"\n        />\n        <Button\n          onClick={handleApplyStyle}\n          disabled={isProcessing || !stylePrompt}\n          className=\"w-full\"\n          variant=\"outline\"\n        >\n          {isProcessing ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <Wand2 className=\"mr-2 h-4 w-4\" />\n          )}\n          Stil Uygula\n        </Button>\n      </div>\n    </CardContent>\n    <CardFooter className=\"flex justify-between\">\n      <Button variant=\"outline\" onClick={onBack}>\n        <ChevronLeft className=\"mr-2 h-4 w-4\" /> Geri\n      </Button>\n      <Button onClick={handleShare} disabled={isProcessing}>\n        {isProcessing ? (\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n        ) : (\n          <Check className=\"mr-2 h-4 w-4\" />\n        )}\n        Paylaş\n      </Button>\n    </CardFooter>\n  </Card>\n);\n\n// Step 2 (Text): Write and Share\nconst Step2TextWrite = ({\n    textContent,\n    setTextContent,\n    isProcessing,\n    handleShare,\n    onBack,\n}: {\n    textContent: string;\n    setTextContent: (value: string) => void;\n    isProcessing: boolean;\n    handleShare: () => void;\n    onBack: () => void;\n}) => (\n    <Card className=\"w-full max-w-lg\">\n        <CardHeader>\n            <CardTitle>Aklındakileri Paylaş</CardTitle>\n            <CardDescription>\n                Düşüncelerini takipçilerinle paylaş.\n            </CardDescription>\n        </CardHeader>\n        <CardContent>\n            <Textarea\n                placeholder=\"Neler oluyor?\"\n                value={textContent}\n                onChange={(e) => setTextContent(e.target.value)}\n                className=\"min-h-[150px] text-lg\"\n                autoFocus\n            />\n        </CardContent>\n        <CardFooter className=\"flex justify-between\">\n            <Button variant=\"outline\" onClick={onBack}>\n                <ChevronLeft className=\"mr-2 h-4 w-4\" /> Geri\n            </Button>\n            <Button onClick={handleShare} disabled={isProcessing || !textContent}>\n                 {isProcessing ? (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : (\n                    <Check className=\"mr-2 h-4 w-4\" />\n                )}\n                Paylaş\n            </Button>\n        </CardFooter>\n    </Card>\n);\n\n\nexport default function CreatePostPage() {\n  const [step, setStep] = useState(1);\n  const [postType, setPostType] = useState<'photo' | 'text' | null>(null);\n  \n  // Photo post states\n  const [imgSrc, setImgSrc] = useState('');\n  const [originalImgSrc, setOriginalImgSrc] = useState('');\n  const [stylePrompt, setStylePrompt] = useState('');\n  const [caption, setCaption] = useState('');\n  \n  // Text post states\n  const [textContent, setTextContent] = useState('');\n  \n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const router = useRouter();\n  const { toast } = useToast();\n  const currentUser = auth.currentUser;\n\n  const handleSelectType = (type: 'photo' | 'text') => {\n      setPostType(type);\n      setStep(2);\n  }\n\n  const onSelectFile = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => {\n        if (reader.result) {\n          const resultStr = reader.result.toString();\n          setImgSrc(resultStr);\n          setOriginalImgSrc(resultStr);\n          setStep(3);\n        }\n      });\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const handleApplyStyle = async () => {\n    if (!stylePrompt) {\n      toast({\n        variant: 'destructive',\n        title: 'Stil Metni Gerekli',\n        description: 'Lütfen bir stil metni girin.',\n      });\n      return;\n    }\n    setIsProcessing(true);\n    try {\n      const result = await stylizeImage({\n        photoDataUri: originalImgSrc, // Always stylize from original\n        prompt: stylePrompt,\n      });\n      if (result.error || !result.stylizedImageDataUri) {\n        throw new Error(result.error || 'Stil uygulanamadı.');\n      }\n      setImgSrc(result.stylizedImageDataUri);\n      toast({\n        title: 'Stil Uygulandı!',\n        description: 'Yapay zeka harikalar yarattı.',\n        className: 'bg-green-500 text-white',\n      });\n    } catch (e: any) {\n      console.error(e);\n      toast({\n        variant: 'destructive',\n        title: 'Stil Hatası',\n        description: e.message,\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleShare = async () => {\n    if (!currentUser) {\n        toast({ variant: 'destructive', title: 'Hata', description: 'Gönderi paylaşmak için giriş yapmalısınız.' });\n        return;\n    }\n    \n    setIsProcessing(true);\n    \n    try {\n        let postData: any = {\n            authorId: currentUser.uid,\n            authorName: currentUser.displayName,\n            authorAvatarUrl: currentUser.photoURL,\n            createdAt: serverTimestamp(),\n            likes: 0,\n            commentsCount: 0,\n            type: postType,\n        };\n\n        if (postType === 'photo') {\n            const moderationResult = await moderateImage({ photoDataUri: imgSrc });\n            if (!moderationResult.isSafe) {\n                toast({ variant: 'destructive', title: 'Uygunsuz İçerik', description: `Yapay zeka bu görseli onaylamadı: ${moderationResult.reason}`, duration: 5000 });\n                setIsProcessing(false);\n                return;\n            }\n            \n            const storageRef = ref(storage, `posts/${currentUser.uid}/${Date.now()}`);\n            const uploadTask = await uploadString(storageRef, imgSrc, 'data_url');\n            const downloadURL = await getDownloadURL(uploadTask.ref);\n\n            postData = { ...postData, url: downloadURL, caption: caption || '' };\n\n        } else if (postType === 'text') {\n            if (!textContent.trim()) {\n                 toast({ variant: 'destructive', title: 'Metin Gerekli', description: 'Lütfen bir şeyler yazın.' });\n                 setIsProcessing(false);\n                 return;\n            }\n            postData = { ...postData, textContent: textContent.trim() };\n        }\n\n        await addDoc(collection(db, 'posts'), postData);\n\n        toast({\n            title: 'Paylaşıldı!',\n            description: 'Gönderiniz başarıyla paylaşıldı.',\n            className: 'bg-green-500 text-white',\n        });\n\n        router.push('/explore');\n        \n    } catch (error) {\n        console.error(\"Error sharing post: \", error);\n        toast({ variant: 'destructive', title: 'Paylaşım Hatası', description: 'Gönderi paylaşılırken bir hata oluştu.' });\n        setIsProcessing(false);\n    }\n};\n\n  \n  const goBackToTypeSelect = () => {\n      setPostType(null);\n      setStep(1);\n      // Reset states\n      setImgSrc('');\n      setOriginalImgSrc('');\n      setStylePrompt('');\n      setCaption('');\n      setTextContent('');\n  }\n\n  const renderStep = () => {\n    if (!postType) {\n        return <Step1ChooseType onSelectType={handleSelectType} />;\n    }\n\n    if (postType === 'photo') {\n        switch (step) {\n          case 2:\n            return <Step2PhotoUpload onFileSelect={onSelectFile} />;\n          case 3:\n            return (\n              <Step3PhotoShare\n                imgSrc={imgSrc}\n                stylePrompt={stylePrompt}\n                setStylePrompt={setStylePrompt}\n                caption={caption}\n                setCaption={setCaption}\n                isProcessing={isProcessing}\n                handleApplyStyle={handleApplyStyle}\n                handleShare={handleShare}\n                onBack={() => setStep(2)}\n              />\n            );\n          default:\n            return <Step1ChooseType onSelectType={handleSelectType} />;\n        }\n    }\n    \n    if (postType === 'text') {\n        switch (step) {\n            case 2:\n                return (\n                    <Step2TextWrite \n                        textContent={textContent}\n                        setTextContent={setTextContent}\n                        isProcessing={isProcessing}\n                        handleShare={handleShare}\n                        onBack={goBackToTypeSelect}\n                    />\n                );\n             default:\n                return <Step1ChooseType onSelectType={handleSelectType} />;\n        }\n    }\n\n    return <Step1ChooseType onSelectType={handleSelectType} />;\n  };\n\n  return (\n    <div className=\"container mx-auto max-w-lg p-4 flex items-center justify-center min-h-[80vh]\">\n      {renderStep()}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}