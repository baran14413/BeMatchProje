{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging user activity.\n *\n * - logActivity - Logs user activity with IP and user agent.\n * - LogActivityInput - The input type for the logActivity function.\n * - LogActivityOutput - The return type for the logActivity function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, serverTimestamp, addDoc, collection } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst LogActivityInputSchema = z.object({\n  userId: z.string().describe('The UID of the user.'),\n  userName: z.string().describe('The name of the user.'),\n  userAvatar: z.string().describe('The avatar URL of the user.'),\n  ipAddress: z.string().describe('The IP address of the user.'),\n  userAgent: z.string().describe('The user agent string of the user\\'s browser.'),\n});\nexport type LogActivityInput = z.infer<typeof LogActivityInputSchema>;\n\nconst LogActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogActivityOutput = z.infer<typeof LogActivityOutputSchema>;\n\nexport async function logActivity(input: LogActivityInput): Promise<LogActivityOutput> {\n    return logActivityFlow(input);\n}\n\nconst logActivityFlow = ai.defineFlow(\n  {\n    name: 'logActivityFlow',\n    inputSchema: LogActivityInputSchema,\n    outputSchema: LogActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        await addDoc(collection(db, 'activityLogs'), {\n            user: {\n                uid: input.userId,\n                name: input.userName,\n                avatarUrl: input.userAvatar,\n            },\n            ipAddress: input.ipAddress,\n            userAgent: input.userAgent,\n            timestamp: serverTimestamp(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to log activity for user ${input.userId}:`, error);\n        return { success: false, error: `Activity logging failed: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,YAAY,KAAuB;IACrD,OAAO,gBAAgB;AAC3B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI,iBAAiB;YACzC,MAAM;gBACF,KAAK,MAAM,MAAM;gBACjB,MAAM,MAAM,QAAQ;gBACpB,WAAW,MAAM,UAAU;YAC/B;YACA,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC7B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/config/bot-config.ts"],"sourcesContent":["\n/**\n * @fileOverview This file contains the configuration for the chat bots.\n * It includes a list of Turkish female names for the bots and a set of\n * predefined replies they can use in conversations.\n */\n\nexport const botNames: string[] = [\n    \"Ayşe\", \"Fatma\", \"Zeynep\", \"Emine\", \"Hatice\", \"Meryem\", \"Elif\", \"Büşra\",\n    \"Sultan\", \"Seda\", \"Aslı\", \"Ceren\", \"Derya\", \"Ebru\", \"Funda\", \"Gizem\",\n    \"Hande\", \"İrem\", \"Kübra\", \"Leyla\", \"Melis\", \"Nazlı\", \"Özge\", \"Pınar\",\n    \"Selin\", \"Tuğba\", \"Yasemin\", \"Burcu\", \"Canan\", \"Deniz\"\n];\n\n// Messages the bot can send as the very first message\nexport const botOpenerMessages: string[] = [\n    \"Selam :)\",\n    \"Merhaba!\",\n    \"Naber?\",\n    \"Slm\",\n    \"Heyy\",\n];\n\n// A large pool of random replies the bot can use during the conversation\nexport const botReplies: string[] = [\n    // Basic Greetings & Conversation Starters\n    \"Merhaba!\", \"Selam, nasılsın?\", \"İyiyim teşekkürler, sen nasılsın?\",\n    \"Ne yapıyorsun?\", \"Günün nasıl geçiyor?\", \"Naber?\", \"Hey!\", \"Slm\",\n\n    // Reactions & Fillers\n    \"Anladım.\", \"Haha, komikmiş.\", \"Hmm, ilginç.\", \"Buna sevindim.\",\n    \"Üzüldüm bunu duyduğuma.\", \"Evet, haklısın.\", \"Gerçekten mi?\", \"Aynen.\",\n    \"Olabilir.\", \"Tamamdır.\", \"Peki.\", \"Doğrudur.\", \"İnanmıyorum!\", \"Harika!\",\n\n    // Questions\n    \"Nerede yaşıyorsun?\", \"Ne iş yapıyorsun?\", \"Hobilerin neler?\",\n    \"Burcun ne?\", \"En sevdiğin film ne?\", \"Müzik zevkin nasıl?\", \"Hafta sonu ne yapıyorsun?\",\n\n    // Slightly Flirty / Playful\n    \"Gözlerin çok güzelmiş.\", \"Gülüşün çok tatlı.\", \"Enerjin çok yüksek.\",\n    \"Seninle konuşmak keyifli.\", \"Bir kahve içsek mi bir ara?\", \"Beni eklesene?\",\n    \"Profiline baktım da, çok hoş.\", \"DM'den yürüyelim mi? ;)\", \"Bana bir şarkı önerir misin?\",\n\n    // Complaining / Boredom\n    \"Bugün canım biraz sıkkın.\", \"Of, çok sıkıldım.\", \"Yapacak bir şey bulamıyorum.\",\n    \"Hava da bir garip.\", \"Keşke tatil olsa.\",\n\n    // Random Statements\n    \"Aklıma bir fikir geldi.\", \"Dur bi dakika...\", \"Ne diyeceğimi unuttum.\",\n    \"Bu arada...\", \"Şey aslında...\", \"Bugün çok yoruldum.\",\n    \n    // Direct Actions\n    \"Bana beğeni atar mısın?\", \"Profilimi takip etmelisin bence.\", \"Son gönderime bir yorum yaparsan sevinirim.\",\n    \"Beni ekle, daha rahat konuşuruz.\", \"Seni favorilerime ekledim.\",\n\n    // Evasive / Ending Conversation\n    \"Daha sonra konuşalım mı?\", \"Biraz işim var da.\", \"Şimdi çıkmam lazım.\",\n    \"Neyse, sonra görüşürüz.\", \"Ben kaçtım!\", \"Yatmam lazım, iyi geceler.\",\n\n    // More variety\n    \"Pizza mı, hamburger mi?\", \"Kedi insanı mısın köpek mi?\", \"En son okuduğun kitap neydi?\",\n    \"Yaz mı, kış mı?\", \"Sabah insanı mısın, gece kuşu mu?\", \"Süper gücün olsa ne olurdu?\",\n    \"Tatlı mı, tuzlu mu seversin?\", \"En sevdiğin renk ne?\", \"Hayalindeki tatil yeri neresi?\",\n    \"Çay mı, kahve mi?\", \"Klasik.\", \"Beklenmedik bir cevap.\", \"Bunu sevdim.\", \"Fena değil.\",\n    \"Daha iyi olabilir.\", \"Emin misin?\", \"Şaka yapıyorsun!\", \"Ciddi olamazsın.\", \"Vay canına.\",\n    \"Bunu beklemiyordum.\", \"Anlat anlat, dinliyorum.\", \"Çok ilginç bir konu.\",\n    \"Bu konu hakkında saatlerce konuşabilirim.\", \"Hiç bu açıdan düşünmemiştim.\",\n    \"Bana yeni bir bakış açısı kazandırdın.\", \"Teşekkür ederim.\", \"Rica ederim.\",\n    \"Lütfen.\", \"Afiyet olsun.\", \"Geçmiş olsun.\", \"Tebrikler!\", \"Bol şans!\", \"Kolay gelsin.\"\n];\n"],"names":[],"mappings":"AACA;;;;CAIC;;;;;AAEM,MAAM,WAAqB;IAC9B;IAAQ;IAAS;IAAU;IAAS;IAAU;IAAU;IAAQ;IAChE;IAAU;IAAQ;IAAQ;IAAS;IAAS;IAAQ;IAAS;IAC7D;IAAS;IAAQ;IAAS;IAAS;IAAS;IAAS;IAAQ;IAC7D;IAAS;IAAS;IAAW;IAAS;IAAS;CAClD;AAGM,MAAM,oBAA8B;IACvC;IACA;IACA;IACA;IACA;CACH;AAGM,MAAM,aAAuB;IAChC,0CAA0C;IAC1C;IAAY;IAAoB;IAChC;IAAkB;IAAwB;IAAU;IAAQ;IAE5D,sBAAsB;IACtB;IAAY;IAAmB;IAAgB;IAC/C;IAA2B;IAAmB;IAAiB;IAC/D;IAAa;IAAa;IAAS;IAAa;IAAgB;IAEhE,YAAY;IACZ;IAAsB;IAAqB;IAC3C;IAAc;IAAwB;IAAuB;IAE7D,4BAA4B;IAC5B;IAA0B;IAAsB;IAChD;IAA6B;IAA+B;IAC5D;IAAiC;IAA2B;IAE5D,wBAAwB;IACxB;IAA6B;IAAqB;IAClD;IAAsB;IAEtB,oBAAoB;IACpB;IAA2B;IAAoB;IAC/C;IAAe;IAAkB;IAEjC,iBAAiB;IACjB;IAA2B;IAAoC;IAC/D;IAAoC;IAEpC,gCAAgC;IAChC;IAA4B;IAAsB;IAClD;IAA2B;IAAe;IAE1C,eAAe;IACf;IAA2B;IAA+B;IAC1D;IAAmB;IAAqC;IACxD;IAAgC;IAAwB;IACxD;IAAqB;IAAW;IAA0B;IAAgB;IAC1E;IAAsB;IAAe;IAAoB;IAAoB;IAC7E;IAAuB;IAA4B;IACnD;IAA6C;IAC7C;IAA0C;IAAoB;IAC9D;IAAW;IAAiB;IAAiB;IAAc;IAAa;CAC3E","debugId":null}},
    {"offset": {"line": 499, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, serverTimestamp as firestoreServerTimestamp, enableIndexedDbPersistence, CACHE_SIZE_UNLIMITED, clearIndexedDbPersistence } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { getDatabase, ref, onValue, set, onDisconnect, serverTimestamp as rtdbServerTimestamp, goOffline, goOnline } from 'firebase/database';\nimport 'firebase/compat/firestore';\nimport firebase from 'firebase/compat/app';\n\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\n\nif (!getApps().length) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\nconst rtdb = getDatabase(app);\n\n\n// Enable offline persistence\nif (typeof window !== 'undefined') {\n    try {\n        enableIndexedDbPersistence(db, {\n            cacheSizeBytes: CACHE_SIZE_UNLIMITED\n        }).catch((err) => {\n            if (err.code == 'failed-precondition') {\n                // Multiple tabs open, persistence can only be enabled\n                // in one tab at a time.\n                console.warn('Firestore persistence failed: multiple tabs open.');\n            } else if (err.code == 'unimplemented') {\n                // The current browser does not support all of the\n                // features required to enable persistence\n                console.warn('Firestore persistence not available in this browser.');\n            }\n        });\n    } catch (error) {\n        console.error(\"Error enabling Firestore persistence:\", error);\n    }\n}\n\nexport const clearCache = async () => {\n    try {\n        // Clear Firestore offline persistence\n        await clearIndexedDbPersistence(db);\n        \n        // Unregister all service workers\n        if ('serviceWorker' in navigator) {\n            const registrations = await navigator.serviceWorker.getRegistrations();\n            for (const registration of registrations) {\n                await registration.unregister();\n            }\n        }\n        \n        // Clear Cache Storage\n        const keys = await caches.keys();\n        await Promise.all(keys.map(key => caches.delete(key)));\n\n    } catch (error) {\n        console.error(\"Error clearing all caches:\", error);\n        throw error;\n    }\n};\n\n\n// Presence management\nconst setupPresence = (userId: string) => {\n    const userStatusDatabaseRef = ref(rtdb, '/status/' + userId);\n    const userFirestoreRef = doc(db, 'users', userId);\n\n    const isOfflineForDatabase = {\n        isOnline: false,\n        lastSeen: rtdbServerTimestamp(),\n    };\n    \n    const isOnlineForDatabase = {\n        isOnline: true,\n    };\n    \n    const isOfflineForFirestore = {\n        isOnline: false,\n        lastSeen: firestoreServerTimestamp(),\n    };\n\n    const isOnlineForFirestore = {\n        isOnline: true,\n    };\n\n    const connectedRef = ref(rtdb, '.info/connected');\n    \n    const listener = onValue(connectedRef, (snap) => {\n        if (snap.val() === false) {\n            // Use setDoc with merge to avoid error if document doesn't exist yet\n            setDoc(userFirestoreRef, isOfflineForFirestore, { merge: true });\n            return;\n        }\n\n        onDisconnect(userStatusDatabaseRef).set(isOfflineForDatabase).then(() => {\n            set(userStatusDatabaseRef, isOnlineForDatabase);\n            // Use setDoc with merge here as well\n            setDoc(userFirestoreRef, isOnlineForFirestore, { merge: true });\n        });\n    });\n\n    const handleVisibilityChange = () => {\n        if (document.visibilityState === 'hidden') {\n            goOffline(rtdb);\n        } else {\n            goOnline(rtdb);\n        }\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n        // Clean up the listener when it's no longer needed\n        // This is a placeholder as onValue returns an unsubscribe function directly\n    };\n};\n\n\nexport { app, auth, db, storage, setupPresence };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/bot-chat-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A flow for handling bot responses in random chats without AI.\n *\n * - botChatFlow - Generates a bot response from a predefined list and adds it to the conversation.\n * - BotChatInput - The input type for the botChatFlow function.\n * - BotChatOutput - The return type for the botChatFlow function.\n */\n\nimport { z } from 'zod';\nimport { getFirestore, serverTimestamp, addDoc, collection, doc, getDoc } from 'firebase-admin/firestore';\nimport { initializeApp, getApps, App } from 'firebase-admin/app';\nimport { botReplies } from '@/config/bot-config';\nimport { auth as clientAuth, db as clientDb } from '@/lib/firebase'; // Assuming you have client instances exported\n\n// This is not a Genkit flow anymore, just a standard server action.\n\nconst BotChatInputSchema = z.object({\n  conversationId: z.string().describe('The ID of the temporary conversation.'),\n});\nexport type BotChatInput = z.infer<typeof BotChatInputSchema>;\n\nconst BotChatOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type BotChatOutput = z.infer<typeof BotChatOutputSchema>;\n\n\nexport async function botChatFlow(input: BotChatInput): Promise<BotChatOutput> {\n    const parsedInput = BotChatInputSchema.safeParse(input);\n    if (!parsedInput.success) {\n        return { success: false, error: 'Invalid input.' };\n    }\n    \n    const { conversationId } = parsedInput.data;\n    const currentUserId = clientAuth.currentUser?.uid;\n\n    if (!currentUserId) {\n         return { success: false, error: 'User not authenticated.' };\n    }\n\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        const convoRef = doc(db, 'temporaryConversations', conversationId);\n        const convoSnap = await getDoc(convoRef);\n\n        if (!convoSnap.exists()) {\n            return { success: false, error: 'Conversation not found.' };\n        }\n\n        const conversation = convoSnap.data();\n\n        // Dynamically find the bot's ID\n        const botUser = conversation.user1.uid.startsWith('bot_') \n            ? conversation.user1 \n            : conversation.user2.uid.startsWith('bot_') \n            ? conversation.user2 \n            : null;\n\n        if (!botUser) {\n            return { success: false, error: 'This is not a bot conversation.' };\n        }\n\n        const botId = botUser.uid;\n\n        // Simple logic to select a random reply from the config\n        const reply = botReplies[Math.floor(Math.random() * botReplies.length)];\n\n        // Add bot's message to the subcollection\n        const messagesRef = collection(convoRef, 'messages');\n        await addDoc(messagesRef, {\n            text: reply,\n            senderId: botId,\n            timestamp: serverTimestamp(),\n        });\n        \n        return { success: true };\n    } catch (error: any) {\n        console.error(`Bot chat flow failed for convo ${conversationId}:`, error);\n        return { success: false, error: `Bot response failed: ${error.message}` };\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AACA;AACA;AACA,8MAAqE,8CAA8C;;;;;;;;;;;;;;AAEnH,oEAAoE;AAEpE,MAAM,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,gBAAgB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,sBAAsB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,SAAS,oIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAIO,eAAe,YAAY,KAAmB;IACjD,MAAM,cAAc,mBAAmB,SAAS,CAAC;IACjD,IAAI,CAAC,YAAY,OAAO,EAAE;QACtB,OAAO;YAAE,SAAS;YAAO,OAAO;QAAiB;IACrD;IAEA,MAAM,EAAE,cAAc,EAAE,GAAG,YAAY,IAAI;IAC3C,MAAM,gBAAgB,sHAAA,CAAA,OAAU,CAAC,WAAW,EAAE;IAE9C,IAAI,CAAC,eAAe;QACf,OAAO;YAAE,SAAS;YAAO,OAAO;QAA0B;IAC/D;IAEA,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,WAAW,CAAA,GAAA,4JAAA,CAAA,MAAG,AAAD,EAAE,IAAI,0BAA0B;QACnD,MAAM,YAAY,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE;QAE/B,IAAI,CAAC,UAAU,MAAM,IAAI;YACrB,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA0B;QAC9D;QAEA,MAAM,eAAe,UAAU,IAAI;QAEnC,gCAAgC;QAChC,MAAM,UAAU,aAAa,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,UAC5C,aAAa,KAAK,GAClB,aAAa,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,UAClC,aAAa,KAAK,GAClB;QAEN,IAAI,CAAC,SAAS;YACV,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAAkC;QACtE;QAEA,MAAM,QAAQ,QAAQ,GAAG;QAEzB,wDAAwD;QACxD,MAAM,QAAQ,8HAAA,CAAA,aAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,8HAAA,CAAA,aAAU,CAAC,MAAM,EAAE;QAEvE,yCAAyC;QACzC,MAAM,cAAc,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,UAAU;QACzC,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,aAAa;YACtB,MAAM;YACN,UAAU;YACV,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC7B;QAEA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,+BAA+B,EAAE,eAAe,CAAC,CAAC,EAAE;QACnE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,qBAAqB,EAAE,MAAM,OAAO,EAAE;QAAC;IAC5E;AACJ;;;IAzDsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 733, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/random-chat/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logActivity as '4089b26089702b1e5adfebade7e2643cec0eef947b'} from 'ACTIONS_MODULE0'\nexport {botChatFlow as '40b255bfd8b59a95f5e0235c9886029314b563b0c9'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 823, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/random-chat/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/random-chat/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/random-chat/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA","debugId":null}},
    {"offset": {"line": 837, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/random-chat/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/random-chat/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/random-chat/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA","debugId":null}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}