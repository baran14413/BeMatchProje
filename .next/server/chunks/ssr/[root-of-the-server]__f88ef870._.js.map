{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging user activity.\n *\n * - logActivity - Logs user activity with IP and user agent.\n * - LogActivityInput - The input type for the logActivity function.\n * - LogActivityOutput - The return type for the logActivity function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, serverTimestamp, addDoc, collection } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst LogActivityInputSchema = z.object({\n  userId: z.string().describe('The UID of the user.'),\n  userName: z.string().describe('The name of the user.'),\n  userAvatar: z.string().describe('The avatar URL of the user.'),\n  ipAddress: z.string().describe('The IP address of the user.'),\n  userAgent: z.string().describe('The user agent string of the user\\'s browser.'),\n  activity: z.string().describe('The description of the activity performed by the user.')\n});\nexport type LogActivityInput = z.infer<typeof LogActivityInputSchema>;\n\nconst LogActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogActivityOutput = z.infer<typeof LogActivityOutputSchema>;\n\nexport async function logActivity(input: LogActivityInput): Promise<LogActivityOutput> {\n    return logActivityFlow(input);\n}\n\nconst logActivityFlow = ai.defineFlow(\n  {\n    name: 'logActivityFlow',\n    inputSchema: LogActivityInputSchema,\n    outputSchema: LogActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        await addDoc(collection(db, 'activityLogs'), {\n            user: {\n                uid: input.userId,\n                name: input.userName,\n                avatarUrl: input.userAvatar,\n            },\n            activity: input.activity,\n            ipAddress: input.ipAddress,\n            userAgent: input.userAgent,\n            timestamp: serverTimestamp(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to log activity for user ${input.userId}:`, error);\n        return { success: false, error: `Activity logging failed: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,YAAY,KAAuB;IACrD,OAAO,gBAAgB;AAC3B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI,iBAAiB;YACzC,MAAM;gBACF,KAAK,MAAM,MAAM;gBACjB,MAAM,MAAM,QAAQ;gBACpB,WAAW,MAAM,UAAU;YAC/B;YACA,UAAU,MAAM,QAAQ;YACxB,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC7B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/translate-text-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI flow for translating text.\n *\n * - translateText - Translates text to Turkish if it's not already in Turkish.\n * - TranslateTextInput - The input type for the translateText function.\n * - TranslateTextOutput - The return type for the translateText function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst TranslateTextInputSchema = z.object({\n  textToTranslate: z\n    .string()\n    .describe('The text that needs to be translated.'),\n});\nexport type TranslateTextInput = z.infer<typeof TranslateTextInputSchema>;\n\nconst TranslateTextOutputSchema = z.object({\n  translatedText: z.string().optional().describe('The translated text in Turkish.'),\n  sourceLanguage: z.string().optional().describe('The detected source language code (e.g., \"en\", \"tr\").'),\n  error: z.string().optional().describe('An error message if translation failed.'),\n});\nexport type TranslateTextOutput = z.infer<typeof TranslateTextOutputSchema>;\n\nexport async function translateText(input: TranslateTextInput): Promise<TranslateTextOutput> {\n  return translateTextFlow(input);\n}\n\nconst LanguageDetectionPromptSchema = z.object({\n    isTurkish: z.boolean(),\n    languageCode: z.string().describe(\"The ISO 639-1 code for the detected language, e.g., 'en', 'fr', 'tr'.\")\n});\n\nconst languageDetectionPrompt = ai.definePrompt({\n    name: 'languageDetectionPrompt',\n    input: { schema: z.object({ text: z.string() }) },\n    output: { schema: LanguageDetectionPromptSchema },\n    system: `Detect the language of the given text. Determine if it is Turkish. Return the ISO 639-1 language code.`,\n    prompt: `Text: \"{{{text}}}\"`\n});\n\n\nconst translationPrompt = ai.definePrompt({\n  name: 'translateTextPrompt',\n  input: {schema: TranslateTextInputSchema},\n  output: {schema: z.object({ translatedText: z.string() })},\n  model: 'googleai/gemini-1.5-flash',\n  system: `You are an expert translator. Your task is to translate the given text into natural-sounding Turkish.\n  Provide only the translated text as output. Do not add any extra explanations or text.`,\n  prompt: `Please translate the following text to Turkish:\n\n\"{{{textToTranslate}}}\"`,\n});\n\nconst translateTextFlow = ai.defineFlow(\n  {\n    name: 'translateTextFlow',\n    inputSchema: TranslateTextInputSchema,\n    outputSchema: TranslateTextOutputSchema,\n  },\n  async ({ textToTranslate }) => {\n    try {\n      if (!textToTranslate.trim()) {\n        return { sourceLanguage: 'tr' }; // Treat empty string as Turkish\n      }\n      \n      const { output: detection } = await languageDetectionPrompt({ text: textToTranslate });\n\n      if (!detection) {\n        throw new Error('Language detection failed.');\n      }\n      \n      if (detection.isTurkish || detection.languageCode === 'tr') {\n          return { sourceLanguage: 'tr' }; // It's already Turkish, no need to translate\n      }\n\n      // If not Turkish, translate it\n      const { output: translation } = await translationPrompt({ textToTranslate });\n      if (!translation) {\n          throw new Error('Translation model did not return a result.');\n      }\n      \n      return { \n          translatedText: translation.translatedText,\n          sourceLanguage: detection.languageCode,\n      };\n\n    } catch (e: any) {\n        console.error(\"Translation flow failed\", e);\n        return { error: 'Çeviri modeli şu anda yoğun. Lütfen daha sonra tekrar deneyin.' };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC/C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACxC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,WAAW,uIAAA,CAAA,IAAC,CAAC,OAAO;IACpB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAE,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAE,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAG;IAAG;IAChD,QAAQ;QAAE,QAAQ;IAA8B;IAChD,QAAQ,CAAC,sGAAsG,CAAC;IAChH,QAAQ,CAAC,kBAAkB,CAAC;AAChC;AAGA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACxC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAwB;IACxC,QAAQ;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAAE,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM;QAAG;IAAE;IACzD,OAAO;IACP,QAAQ,CAAC;wFAC6E,CAAC;IACvF,QAAQ,CAAC;;uBAEY,CAAC;AACxB;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,eAAe,EAAE;IACxB,IAAI;QACF,IAAI,CAAC,gBAAgB,IAAI,IAAI;YAC3B,OAAO;gBAAE,gBAAgB;YAAK,GAAG,gCAAgC;QACnE;QAEA,MAAM,EAAE,QAAQ,SAAS,EAAE,GAAG,MAAM,wBAAwB;YAAE,MAAM;QAAgB;QAEpF,IAAI,CAAC,WAAW;YACd,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI,UAAU,SAAS,IAAI,UAAU,YAAY,KAAK,MAAM;YACxD,OAAO;gBAAE,gBAAgB;YAAK,GAAG,6CAA6C;QAClF;QAEA,+BAA+B;QAC/B,MAAM,EAAE,QAAQ,WAAW,EAAE,GAAG,MAAM,kBAAkB;YAAE;QAAgB;QAC1E,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;YACH,gBAAgB,YAAY,cAAc;YAC1C,gBAAgB,UAAU,YAAY;QAC1C;IAEF,EAAE,OAAO,GAAQ;QACb,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;YAAE,OAAO;QAAiE;IACrF;AACF;;;IAnEoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/explore/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logActivity as '4089b26089702b1e5adfebade7e2643cec0eef947b'} from 'ACTIONS_MODULE0'\nexport {translateText as '406029a3f7f6235cc11d614e16894446b7b1dc86a5'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/explore/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/explore/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/explore/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","debugId":null}},
    {"offset": {"line": 559, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/explore/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/explore/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/explore/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8Q,GAC3S,4CACA","debugId":null}},
    {"offset": {"line": 573, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}