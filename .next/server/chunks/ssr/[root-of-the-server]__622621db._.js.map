{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging user activity.\n *\n * - logActivity - Logs user activity with IP and user agent.\n * - LogActivityInput - The input type for the logActivity function.\n * - LogActivityOutput - The return type for the logActivity function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, Timestamp } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst LogActivityInputSchema = z.object({\n  userId: z.string().describe('The UID of the user.'),\n  userName: z.string().describe('The name of the user.'),\n  userAvatar: z.string().describe('The avatar URL of the user.'),\n  ipAddress: z.string().describe('The IP address of the user.'),\n  userAgent: z.string().describe('The user agent string of the user\\'s browser.'),\n  activity: z.string().describe('The description of the activity performed by the user.')\n});\nexport type LogActivityInput = z.infer<typeof LogActivityInputSchema>;\n\nconst LogActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogActivityOutput = z.infer<typeof LogActivityOutputSchema>;\n\nexport async function logActivity(input: LogActivityInput): Promise<LogActivityOutput> {\n    return logActivityFlow(input);\n}\n\nconst logActivityFlow = ai.defineFlow(\n  {\n    name: 'logActivityFlow',\n    inputSchema: LogActivityInputSchema,\n    outputSchema: LogActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        await db.collection('activityLogs').add({\n            user: {\n                uid: input.userId,\n                name: input.userName,\n                avatarUrl: input.userAvatar,\n            },\n            activity: input.activity,\n            ipAddress: input.ipAddress,\n            userAgent: input.userAgent,\n            timestamp: Timestamp.now(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to log activity for user ${input.userId}:`, error);\n        return { success: false, error: `Activity logging failed: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,YAAY,KAAuB;IACrD,OAAO,gBAAgB;AAC3B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,GAAG,UAAU,CAAC,gBAAgB,GAAG,CAAC;YACpC,MAAM;gBACF,KAAK,MAAM,MAAM;gBACjB,MAAM,MAAM,QAAQ;gBACpB,WAAW,MAAM,UAAU;YAC/B;YACA,UAAU,MAAM,QAAQ;YACxB,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,WAAW,4JAAA,CAAA,YAAS,CAAC,GAAG;QAC5B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-suspicious-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging suspicious login attempts to the admin panel.\n *\n * - logSuspiciousActivity - Logs the attempt with details and a face capture image.\n * - LogSuspiciousActivityInput - The input type for the function.\n * - LogSuspiciousActivityOutput - The return type for the function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, Timestamp } from 'firebase-admin/firestore';\nimport { getStorage as getAdminStorage } from 'firebase-admin/storage';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\n\nconst LogSuspiciousActivityInputSchema = z.object({\n  attemptedPin: z.string().describe('The PIN that was entered.'),\n  attemptedKey: z.string().describe('The security key that was entered.'),\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of the user, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type LogSuspiciousActivityInput = z.infer<typeof LogSuspiciousActivityInputSchema>;\n\nconst LogSuspiciousActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogSuspiciousActivityOutput = z.infer<typeof LogSuspiciousActivityOutputSchema>;\n\nexport async function logSuspiciousActivity(input: LogSuspiciousActivityInput): Promise<LogSuspiciousActivityOutput> {\n    return logSuspiciousActivityFlow(input);\n}\n\nconst logSuspiciousActivityFlow = ai.defineFlow(\n  {\n    name: 'logSuspiciousActivityFlow',\n    inputSchema: LogSuspiciousActivityInputSchema,\n    outputSchema: LogSuspiciousActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n    const storage = getAdminStorage().bucket(process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET);\n    \n    try {\n      const mimeType = input.photoDataUri.match(/data:(.*);base64,/)?.[1] || 'image/jpeg';\n      const fileExtension = mimeType.split('/')[1] || 'jpg';\n      const buffer = Buffer.from(input.photoDataUri.split('base64,')[1], 'base64');\n      const fileName = `suspicious-logins/${Date.now()}.${fileExtension}`;\n      const file = storage.file(fileName);\n\n      await file.save(buffer, {\n          metadata: { contentType: mimeType },\n      });\n      const [photoUrl] = await file.getSignedUrl({\n          action: 'read',\n          expires: '03-09-2491', // A long expiry date\n      });\n\n      // 2. Log the activity to Firestore\n      await db.collection('suspicious-logins').add({\n        attemptedPin: input.attemptedPin,\n        attemptedKey: input.attemptedKey,\n        photoUrl: photoUrl,\n        timestamp: Timestamp.now(),\n      });\n\n      return { success: true };\n    } catch (error: any) {\n      console.error(`Failed to log suspicious activity:`, error);\n      return { success: false, error: `Suspicious activity could not be logged: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAGA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,sBAAsB,KAAiC;IACzE,OAAO,0BAA0B;AACrC;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IACtB,MAAM,UAAU,CAAA,GAAA,wJAAA,CAAA,aAAe,AAAD,IAAI,MAAM;IAExC,IAAI;QACF,MAAM,WAAW,MAAM,YAAY,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE,IAAI;QACvE,MAAM,gBAAgB,SAAS,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;QAChD,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,YAAY,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,EAAE;QACnE,MAAM,WAAW,CAAC,kBAAkB,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,eAAe;QACnE,MAAM,OAAO,QAAQ,IAAI,CAAC;QAE1B,MAAM,KAAK,IAAI,CAAC,QAAQ;YACpB,UAAU;gBAAE,aAAa;YAAS;QACtC;QACA,MAAM,CAAC,SAAS,GAAG,MAAM,KAAK,YAAY,CAAC;YACvC,QAAQ;YACR,SAAS;QACb;QAEA,mCAAmC;QACnC,MAAM,GAAG,UAAU,CAAC,qBAAqB,GAAG,CAAC;YAC3C,cAAc,MAAM,YAAY;YAChC,cAAc,MAAM,YAAY;YAChC,UAAU;YACV,WAAW,4JAAA,CAAA,YAAS,CAAC,GAAG;QAC1B;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;QACpD,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yCAAyC,EAAE,MAAM,OAAO,EAAE;QAAC;IAC9F;AACF;;;IA7CoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ip-management-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Genkit flows for managing IP blocking.\n *\n * - blockIp - Adds an IP address to the blocklist.\n * - unblockIp - Removes an IP address from the blocklist.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, Timestamp } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\n// Input schema for blocking an IP\nconst BlockIpInputSchema = z.object({\n  ipAddress: z.string().ip().describe('The IP address to block.'),\n  reason: z.string().optional().describe('The reason for blocking the IP.'),\n});\nexport type BlockIpInput = z.infer<typeof BlockIpInputSchema>;\n\n// Input schema for unblocking an IP\nconst UnblockIpInputSchema = z.object({\n  ipAddress: z.string().ip().describe('The IP address to unblock.'),\n});\nexport type UnblockIpInput = z.infer<typeof UnblockIpInputSchema>;\n\n// Generic output schema\nconst ManagementOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type ManagementOutput = z.infer<typeof ManagementOutputSchema>;\n\n// Exported function to block an IP\nexport async function blockIp(input: BlockIpInput): Promise<ManagementOutput> {\n    return blockIpFlow(input);\n}\n\n// Exported function to unblock an IP\nexport async function unblockIp(input: UnblockIpInput): Promise<ManagementOutput> {\n    return unblockIpFlow(input);\n}\n\n\nconst blockIpFlow = ai.defineFlow(\n  {\n    name: 'blockIpFlow',\n    inputSchema: BlockIpInputSchema,\n    outputSchema: ManagementOutputSchema,\n  },\n  async ({ ipAddress, reason }) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        const blockRef = db.collection('blocked-ips').doc(ipAddress);\n        await blockRef.set({\n            reason: reason || 'Neden belirtilmedi',\n            blockedAt: Timestamp.now(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to block IP ${ipAddress}:`, error);\n        return { success: false, error: `IP engellenemedi: ${error.message}` };\n    }\n  }\n);\n\n\nconst unblockIpFlow = ai.defineFlow(\n  {\n    name: 'unblockIpFlow',\n    inputSchema: UnblockIpInputSchema,\n    outputSchema: ManagementOutputSchema,\n  },\n  async ({ ipAddress }) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        const blockRef = db.collection('blocked-ips').doc(ipAddress);\n        await blockRef.delete();\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to unblock IP ${ipAddress}:`, error);\n        return { success: false, error: `IP engeli kaldırılamadı: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;;AAEA;;;;;CAKC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,kCAAkC;AAClC,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,EAAE,GAAG,QAAQ,CAAC;IACpC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACzC;AAGA,oCAAoC;AACpC,MAAM,uBAAuB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,EAAE,GAAG,QAAQ,CAAC;AACtC;AAGA,wBAAwB;AACxB,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAIO,eAAe,QAAQ,KAAmB;IAC7C,OAAO,YAAY;AACvB;AAGO,eAAe,UAAU,KAAqB;IACjD,OAAO,cAAc;AACzB;AAGA,MAAM,cAAc,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/B;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE;IAC1B,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,WAAW,GAAG,UAAU,CAAC,eAAe,GAAG,CAAC;QAClD,MAAM,SAAS,GAAG,CAAC;YACf,QAAQ,UAAU;YAClB,WAAW,4JAAA,CAAA,YAAS,CAAC,GAAG;QAC5B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC,EAAE;QAClD,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,kBAAkB,EAAE,MAAM,OAAO,EAAE;QAAC;IACzE;AACF;AAIF,MAAM,gBAAgB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,SAAS,EAAE;IAClB,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,WAAW,GAAG,UAAU,CAAC,eAAe,GAAG,CAAC;QAClD,MAAM,SAAS,MAAM;QACrB,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC,EAAE;QACpD,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAzDoB;IAKA;;AALA,+OAAA;AAKA,+OAAA","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/admin/activity-logs/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logActivity as '4089b26089702b1e5adfebade7e2643cec0eef947b'} from 'ACTIONS_MODULE0'\nexport {logSuspiciousActivity as '40680b24048d25ecd6783caec7cb78d07ae0bb6343'} from 'ACTIONS_MODULE1'\nexport {blockIp as '40f4bc0511c4e45ed23b95e4331ce96c8e61a66cda'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/admin/activity-logs/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/admin/activity-logs/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/admin/activity-logs/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/admin/activity-logs/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/admin/activity-logs/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/admin/activity-logs/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 695, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}