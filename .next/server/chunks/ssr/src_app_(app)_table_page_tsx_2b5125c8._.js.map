{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/table/page.tsx"],"sourcesContent":["\n'use client';\n\nimport React, { useState } from 'react';\nimport { cn } from '@/lib/utils';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { auth } from '@/lib/firebase';\nimport { User as UserIcon } from 'lucide-react';\n\nconst SEAT_COUNT = 7;\n\nexport default function TablePage() {\n  const currentUser = auth.currentUser;\n  const [seats, setSeats] = useState<(string | null)[]>(new Array(SEAT_COUNT).fill(null));\n\n  const handleSeatClick = (index: number) => {\n    setSeats(prevSeats => {\n      const newSeats = [...prevSeats];\n      // Check if user is already seated\n      const userSeatIndex = newSeats.indexOf(currentUser?.uid || '');\n      \n      if (userSeatIndex !== -1) { // User is seated\n        if (userSeatIndex === index) { // Clicked their own seat to stand up\n          newSeats[index] = null;\n        }\n        // If they click another seat while already seated, do nothing for now\n      } else { // User is not seated\n        if (newSeats[index] === null) { // Seat is empty\n          newSeats[index] = currentUser?.uid || null;\n        }\n      }\n      return newSeats;\n    });\n  };\n\n  const renderSeat = (index: number) => {\n    const isOccupied = seats[index] !== null;\n    const isCurrentUser = isOccupied && seats[index] === currentUser?.uid;\n\n    // Positioning logic for chairs around an elliptic table\n    const angle = (index / SEAT_COUNT) * 2 * Math.PI;\n    const tableWidth = 65; // %\n    const tableHeight = 35; // %\n    const top = 50 - Math.sin(angle) * (tableHeight + 10);\n    const left = 50 + Math.cos(angle) * (tableWidth / 2 + 10);\n    const rotation = -angle * (180 / Math.PI) + 90;\n\n    return (\n      <div\n        key={index}\n        className=\"absolute -translate-x-1/2 -translate-y-1/2 cursor-pointer group\"\n        style={{\n          top: `${top}%`,\n          left: `${left}%`,\n          transform: `translate(-50%, -50%) rotate(${rotation}deg)`,\n        }}\n        onClick={() => handleSeatClick(index)}\n      >\n        <div className=\"relative w-16 h-20\">\n          {/* Chair Back */}\n          <div className=\"absolute top-0 left-1/2 -translate-x-1/2 w-14 h-16 bg-yellow-800 rounded-t-lg shadow-md group-hover:bg-yellow-700 transition-colors\"></div>\n          {/* Chair Seat */}\n          <div className=\"absolute bottom-0 left-0 w-16 h-8 bg-yellow-900 rounded-md shadow-lg\"></div>\n           {/* Avatar on Seat */}\n          {isOccupied && (\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n                 <Avatar className=\"w-10 h-10 border-2 bg-background\" style={{ transform: `rotate(${-rotation}deg)`}}>\n                    <AvatarImage src={isCurrentUser ? currentUser.photoURL || '' : ''} />\n                    <AvatarFallback>\n                        <UserIcon className=\"w-5 h-5\"/>\n                    </AvatarFallback>\n                </Avatar>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"w-full h-full flex items-center justify-center bg-green-900/40 relative overflow-hidden p-4\">\n        {/* Wooden floor effect */}\n      <div className=\"absolute inset-0 bg-[url('https://www.transparenttextures.com/patterns/wood-pattern.png')] opacity-30\"></div>\n      \n      <div className=\"relative w-[70vw] h-[50vh] max-w-4xl max-h-96\">\n        {/* Table */}\n        <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[65%] h-[35%] \n                        bg-yellow-900 rounded-[50%] shadow-2xl border-4 border-yellow-950\n                        bg-[url('https://www.transparenttextures.com/patterns/wood-pattern.png')] bg-repeat\">\n            <div className=\"absolute inset-0 rounded-[50%] shadow-[inset_0_10px_20px_rgba(0,0,0,0.4)]\"></div>\n        </div>\n\n        {/* Seats */}\n        {seats.map((_, index) => renderSeat(index))}\n      </div>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":";;;;AAGA;AAEA;AACA;AACA;AANA;;;;;;AAQA,MAAM,aAAa;AAEJ,SAAS;IACtB,MAAM,cAAc,sHAAA,CAAA,OAAI,CAAC,WAAW;IACpC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB,IAAI,MAAM,YAAY,IAAI,CAAC;IAEjF,MAAM,kBAAkB,CAAC;QACvB,SAAS,CAAA;YACP,MAAM,WAAW;mBAAI;aAAU;YAC/B,kCAAkC;YAClC,MAAM,gBAAgB,SAAS,OAAO,CAAC,aAAa,OAAO;YAE3D,IAAI,kBAAkB,CAAC,GAAG;gBACxB,IAAI,kBAAkB,OAAO;oBAC3B,QAAQ,CAAC,MAAM,GAAG;gBACpB;YACA,sEAAsE;YACxE,OAAO;gBACL,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM;oBAC5B,QAAQ,CAAC,MAAM,GAAG,aAAa,OAAO;gBACxC;YACF;YACA,OAAO;QACT;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,MAAM,aAAa,KAAK,CAAC,MAAM,KAAK;QACpC,MAAM,gBAAgB,cAAc,KAAK,CAAC,MAAM,KAAK,aAAa;QAElE,wDAAwD;QACxD,MAAM,QAAQ,AAAC,QAAQ,aAAc,IAAI,KAAK,EAAE;QAChD,MAAM,aAAa,IAAI,IAAI;QAC3B,MAAM,cAAc,IAAI,IAAI;QAC5B,MAAM,MAAM,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE;QACpD,MAAM,OAAO,KAAK,KAAK,GAAG,CAAC,SAAS,CAAC,aAAa,IAAI,EAAE;QACxD,MAAM,WAAW,CAAC,QAAQ,CAAC,MAAM,KAAK,EAAE,IAAI;QAE5C,qBACE,8OAAC;YAEC,WAAU;YACV,OAAO;gBACL,KAAK,GAAG,IAAI,CAAC,CAAC;gBACd,MAAM,GAAG,KAAK,CAAC,CAAC;gBAChB,WAAW,CAAC,6BAA6B,EAAE,SAAS,IAAI,CAAC;YAC3D;YACA,SAAS,IAAM,gBAAgB;sBAE/B,cAAA,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;;;;;;kCAEf,8OAAC;wBAAI,WAAU;;;;;;oBAEd,4BACC,8OAAC;wBAAI,WAAU;kCACV,cAAA,8OAAC,kIAAA,CAAA,SAAM;4BAAC,WAAU;4BAAmC,OAAO;gCAAE,WAAW,CAAC,OAAO,EAAE,CAAC,SAAS,IAAI,CAAC;4BAAA;;8CAC/F,8OAAC,kIAAA,CAAA,cAAW;oCAAC,KAAK,gBAAgB,YAAY,QAAQ,IAAI,KAAK;;;;;;8CAC/D,8OAAC,kIAAA,CAAA,iBAAc;8CACX,cAAA,8OAAC,kMAAA,CAAA,OAAQ;wCAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;WApB/B;;;;;IA4BX;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,WAAU;;;;;;0BAEf,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;kCAGX,cAAA,8OAAC;4BAAI,WAAU;;;;;;;;;;;oBAIlB,MAAM,GAAG,CAAC,CAAC,GAAG,QAAU,WAAW;;;;;;;;;;;;;AAI5C","debugId":null}}]
}