{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging user activity.\n *\n * - logActivity - Logs user activity with IP and user agent.\n * - LogActivityInput - The input type for the logActivity function.\n * - LogActivityOutput - The return type for the logActivity function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, serverTimestamp, addDoc, collection } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst LogActivityInputSchema = z.object({\n  userId: z.string().describe('The UID of the user.'),\n  userName: z.string().describe('The name of the user.'),\n  userAvatar: z.string().describe('The avatar URL of the user.'),\n  ipAddress: z.string().describe('The IP address of the user.'),\n  userAgent: z.string().describe('The user agent string of the user\\'s browser.'),\n});\nexport type LogActivityInput = z.infer<typeof LogActivityInputSchema>;\n\nconst LogActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogActivityOutput = z.infer<typeof LogActivityOutputSchema>;\n\nexport async function logActivity(input: LogActivityInput): Promise<LogActivityOutput> {\n    return logActivityFlow(input);\n}\n\nconst logActivityFlow = ai.defineFlow(\n  {\n    name: 'logActivityFlow',\n    inputSchema: LogActivityInputSchema,\n    outputSchema: LogActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        await addDoc(collection(db, 'activityLogs'), {\n            user: {\n                uid: input.userId,\n                name: input.userName,\n                avatarUrl: input.userAvatar,\n            },\n            ipAddress: input.ipAddress,\n            userAgent: input.userAgent,\n            timestamp: serverTimestamp(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to log activity for user ${input.userId}:`, error);\n        return { success: false, error: `Activity logging failed: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,YAAY,KAAuB;IACrD,OAAO,gBAAgB;AAC3B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI,iBAAiB;YACzC,MAAM;gBACF,KAAK,MAAM,MAAM;gBACjB,MAAM,MAAM,QAAQ;gBACpB,WAAW,MAAM,UAAU;YAC/B;YACA,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC7B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/award-xp-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for awarding XP to users and handling level ups.\n *\n * - awardXp - Awards a specified amount of XP to a user.\n * - AwardXpInput - The input type for the awardXp function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, doc, runTransaction, serverTimestamp, collection, addDoc } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst AwardXpInputSchema = z.object({\n  userId: z.string().describe('The UID of the user to award XP to.'),\n  xpAmount: z.number().int().positive().describe('The amount of XP to award.'),\n  reason: z.string().optional().describe('The reason for awarding XP (e.g., \"new_post\").'),\n});\nexport type AwardXpInput = z.infer<typeof AwardXpInputSchema>;\n\nconst calculateXpForNextLevel = (level: number) => (level + 1) * 100;\n\nconst awardXpFlow = ai.defineFlow(\n  {\n    name: 'awardXpFlow',\n    inputSchema: AwardXpInputSchema,\n    outputSchema: z.object({ success: z.boolean(), leveledUp: z.boolean() }),\n  },\n  async ({ userId, xpAmount }) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n    const userRef = doc(db, 'users', userId);\n\n    try {\n      let leveledUp = false;\n      await runTransaction(db, async (transaction) => {\n        const userDoc = await transaction.get(userRef);\n        if (!userDoc.exists()) {\n          console.error(`User ${userId} not found.`);\n          return;\n        }\n\n        const userData = userDoc.data();\n        let currentLevel = userData.level || 1;\n        let currentXp = userData.xp || 0;\n        \n        let newXp = currentXp + xpAmount;\n        let xpForNextLevel = calculateXpForNextLevel(currentLevel);\n\n        while (newXp >= xpForNextLevel) {\n          newXp -= xpForNextLevel;\n          currentLevel++;\n          leveledUp = true;\n          xpForNextLevel = calculateXpForNextLevel(currentLevel);\n          \n           // Create a notification for level up\n           const notificationRef = doc(collection(db, 'notifications'));\n           transaction.set(notificationRef, {\n               recipientId: userId,\n               type: 'level_up',\n               content: `Tebrikler! Seviye ${currentLevel}'e ulaştın!`,\n               read: false,\n               createdAt: serverTimestamp(),\n               fromUser: {\n                   uid: 'system',\n                   name: 'BeMatch',\n                   avatar: '/icons/app-logo.svg' // System avatar\n               }\n           });\n        }\n        \n        transaction.update(userRef, {\n          xp: newXp,\n          level: currentLevel,\n        });\n      });\n      return { success: true, leveledUp };\n    } catch (error: any) {\n      console.error(`Failed to award XP to user ${userId}:`, error);\n      return { success: false, leveledUp: false };\n    }\n  }\n);\n\n\nexport async function awardXp(\n  input: AwardXpInput\n): Promise<{ success: boolean; leveledUp: boolean }> {\n  return awardXpFlow(input);\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;CAKC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAC/C,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACzC;AAGA,MAAM,0BAA0B,CAAC,QAAkB,CAAC,QAAQ,CAAC,IAAI;AAEjE,MAAM,cAAc,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/B;IACE,MAAM;IACN,aAAa;IACb,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;QAAI,WAAW,uIAAA,CAAA,IAAC,CAAC,OAAO;IAAG;AACxE,GACA,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE;IACzB,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IACtB,MAAM,UAAU,CAAA,GAAA,4JAAA,CAAA,MAAG,AAAD,EAAE,IAAI,SAAS;IAEjC,IAAI;QACF,IAAI,YAAY;QAChB,MAAM,CAAA,GAAA,4JAAA,CAAA,iBAAc,AAAD,EAAE,IAAI,OAAO;YAC9B,MAAM,UAAU,MAAM,YAAY,GAAG,CAAC;YACtC,IAAI,CAAC,QAAQ,MAAM,IAAI;gBACrB,QAAQ,KAAK,CAAC,CAAC,KAAK,EAAE,OAAO,WAAW,CAAC;gBACzC;YACF;YAEA,MAAM,WAAW,QAAQ,IAAI;YAC7B,IAAI,eAAe,SAAS,KAAK,IAAI;YACrC,IAAI,YAAY,SAAS,EAAE,IAAI;YAE/B,IAAI,QAAQ,YAAY;YACxB,IAAI,iBAAiB,wBAAwB;YAE7C,MAAO,SAAS,eAAgB;gBAC9B,SAAS;gBACT;gBACA,YAAY;gBACZ,iBAAiB,wBAAwB;gBAExC,qCAAqC;gBACrC,MAAM,kBAAkB,CAAA,GAAA,4JAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI;gBAC3C,YAAY,GAAG,CAAC,iBAAiB;oBAC7B,aAAa;oBACb,MAAM;oBACN,SAAS,CAAC,kBAAkB,EAAE,aAAa,WAAW,CAAC;oBACvD,MAAM;oBACN,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;oBACzB,UAAU;wBACN,KAAK;wBACL,MAAM;wBACN,QAAQ,sBAAsB,gBAAgB;oBAClD;gBACJ;YACH;YAEA,YAAY,MAAM,CAAC,SAAS;gBAC1B,IAAI;gBACJ,OAAO;YACT;QACF;QACA,OAAO;YAAE,SAAS;YAAM;QAAU;IACpC,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC,EAAE;QACvD,OAAO;YAAE,SAAS;YAAO,WAAW;QAAM;IAC5C;AACF;AAIK,eAAe,QACpB,KAAmB;IAEnB,OAAO,YAAY;AACrB;;;IAJsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/explore/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logActivity as '4089b26089702b1e5adfebade7e2643cec0eef947b'} from 'ACTIONS_MODULE0'\nexport {awardXp as '40ee0c2569faa45207a27316c0a2f41e06f3637293'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 542, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/explore/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/explore/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/explore/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkS,GAC/T,gEACA","debugId":null}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/explore/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/explore/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/explore/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8Q,GAC3S,4CACA","debugId":null}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}