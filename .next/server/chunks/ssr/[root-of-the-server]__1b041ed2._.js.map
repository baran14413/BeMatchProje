{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging user activity.\n *\n * - logActivity - Logs user activity with IP and user agent.\n * - LogActivityInput - The input type for the logActivity function.\n * - LogActivityOutput - The return type for the logActivity function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, serverTimestamp, addDoc, collection } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst LogActivityInputSchema = z.object({\n  userId: z.string().describe('The UID of the user.'),\n  userName: z.string().describe('The name of the user.'),\n  userAvatar: z.string().describe('The avatar URL of the user.'),\n  ipAddress: z.string().describe('The IP address of the user.'),\n  userAgent: z.string().describe('The user agent string of the user\\'s browser.'),\n  activity: z.string().describe('The description of the activity performed by the user.')\n});\nexport type LogActivityInput = z.infer<typeof LogActivityInputSchema>;\n\nconst LogActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogActivityOutput = z.infer<typeof LogActivityOutputSchema>;\n\nexport async function logActivity(input: LogActivityInput): Promise<LogActivityOutput> {\n    return logActivityFlow(input);\n}\n\nconst logActivityFlow = ai.defineFlow(\n  {\n    name: 'logActivityFlow',\n    inputSchema: LogActivityInputSchema,\n    outputSchema: LogActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        await addDoc(collection(db, 'activityLogs'), {\n            user: {\n                uid: input.userId,\n                name: input.userName,\n                avatarUrl: input.userAvatar,\n            },\n            activity: input.activity,\n            ipAddress: input.ipAddress,\n            userAgent: input.userAgent,\n            timestamp: serverTimestamp(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to log activity for user ${input.userId}:`, error);\n        return { success: false, error: `Activity logging failed: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,YAAY,KAAuB;IACrD,OAAO,gBAAgB;AAC3B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI,iBAAiB;YACzC,MAAM;gBACF,KAAK,MAAM,MAAM;gBACjB,MAAM,MAAM,QAAQ;gBACpB,WAAW,MAAM,UAAU;YAC/B;YACA,UAAU,MAAM,QAAQ;YACxB,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC7B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/delete-user-data-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for completely deleting a user and all their associated data.\n *\n * - deleteUserData - Deletes a user's profile, posts, storage files, conversations, and auth record.\n * - DeleteUserDataInput - The input type for the deleteUserData function.\n * - DeleteUserDataOutput - The return type for the deleteUserData function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, WriteBatch, FieldValue } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\nimport { initializeApp, getApps } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\n\n\nconst DeleteUserDataInputSchema = z.object({\n  userId: z.string().describe('The UID of the user to be deleted.'),\n});\nexport type DeleteUserDataInput = z.infer<typeof DeleteUserDataInputSchema>;\n\nconst DeleteUserDataOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type DeleteUserDataOutput = z.infer<typeof DeleteUserDataOutputSchema>;\n\n\nexport async function deleteUserData(input: DeleteUserDataInput): Promise<DeleteUserDataOutput> {\n    return deleteUserDataFlow(input);\n}\n\n// Helper to delete subcollections in batches\nasync function deleteSubcollection(db: FirebaseFirestore.Firestore, collectionPath: string, batchSize: number = 100) {\n    const collectionRef = db.collection(collectionPath);\n    const query = collectionRef.orderBy('__name__').limit(batchSize);\n\n    return new Promise<void>((resolve, reject) => {\n        deleteQueryBatch(db, query, resolve).catch(reject);\n    });\n}\n\nasync function deleteQueryBatch(db: FirebaseFirestore.Firestore, query: FirebaseFirestore.Query, resolve: () => void) {\n    const snapshot = await query.get();\n\n    if (snapshot.size === 0) {\n        resolve();\n        return;\n    }\n\n    const batch = db.batch();\n    snapshot.docs.forEach((doc) => {\n        batch.delete(doc.ref);\n    });\n    await batch.commit();\n\n    process.nextTick(() => {\n        deleteQueryBatch(db, query, resolve);\n    });\n}\n\n\nconst deleteUserDataFlow = ai.defineFlow(\n  {\n    name: 'deleteUserDataFlow',\n    inputSchema: DeleteUserDataInputSchema,\n    outputSchema: DeleteUserDataOutputSchema,\n  },\n  async ({ userId }) => {\n    \n    if (!getApps().length) {\n        initializeApp();\n    }\n    \n    const db = getFirestore();\n    const storage = getStorage();\n    const auth = getAuth();\n\n    if (!userId) {\n        return { success: false, error: 'Kullanıcı ID\\'si sağlanmadı.' };\n    }\n\n    try {\n        const batch = db.batch();\n        const userDocRef = db.collection('users').doc(userId);\n\n        // 1. Delete user's posts. Associated storage files will be orphaned but this is safer.\n        const postsQuery = db.collection('posts').where('authorId', '==', userId);\n        const postsSnapshot = await postsQuery.get();\n        for (const postDoc of postsSnapshot.docs) {\n            await deleteSubcollection(db, `posts/${postDoc.id}/comments`);\n            await deleteSubcollection(db, `posts/${postDoc.id}/likes`);\n            batch.delete(postDoc.ref);\n        }\n\n        // 2. Delete user's conversations\n        const conversationsQuery = db.collection('conversations').where('users', 'array-contains', userId);\n        const conversationsSnapshot = await conversationsQuery.get();\n        for (const convoDoc of conversationsSnapshot.docs) {\n            await deleteSubcollection(db, `conversations/${convoDoc.id}/messages`);\n            batch.delete(convoDoc.ref);\n        }\n        \n        // 3. Delete user's subcollections from their own profile\n        await deleteSubcollection(db, `users/${userId}/followers`);\n        await deleteSubcollection(db, `users/${userId}/following`);\n        await deleteSubcollection(db, `users/${userId}/galleryPermissions`);\n\n        // Finally, delete the user document itself\n        batch.delete(userDocRef);\n\n        // Commit all batched Firestore deletions\n        await batch.commit();\n\n        // 4. Delete the user from Firebase Authentication\n        await auth.deleteUser(userId);\n\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to delete user ${userId}:`, error);\n        // Provide a more generic but helpful error message to the user\n        let errorMessage = 'Hesap silinirken bir sunucu hatası oluştu. Lütfen daha sonra tekrar deneyin.';\n        if (error.code === 'auth/user-not-found') {\n            errorMessage = 'Kullanıcı zaten silinmiş veya bulunamadı.';\n        }\n        return { success: false, error: errorMessage };\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/profile/edit/delete/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logActivity as '4089b26089702b1e5adfebade7e2643cec0eef947b'} from 'ACTIONS_MODULE0'\nexport {deleteUserData as '4076365984dec01c64a5fd543a3b6e6674f10ecaec'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/profile/edit/delete/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/profile/edit/delete/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/profile/edit/delete/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","debugId":null}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/profile/edit/delete/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/profile/edit/delete/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/profile/edit/delete/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}