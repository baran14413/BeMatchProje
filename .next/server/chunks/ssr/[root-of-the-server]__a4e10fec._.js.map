{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging user activity.\n *\n * - logActivity - Logs user activity with IP and user agent.\n * - LogActivityInput - The input type for the logActivity function.\n * - LogActivityOutput - The return type for the logActivity function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, serverTimestamp, addDoc, collection } from 'firebase-admin/firestore';\nimport { initializeApp, getApps } from 'firebase-admin/app';\n\nconst LogActivityInputSchema = z.object({\n  userId: z.string().describe('The UID of the user.'),\n  userName: z.string().describe('The name of the user.'),\n  userAvatar: z.string().describe('The avatar URL of the user.'),\n  ipAddress: z.string().describe('The IP address of the user.'),\n  userAgent: z.string().describe('The user agent string of the user\\'s browser.'),\n});\nexport type LogActivityInput = z.infer<typeof LogActivityInputSchema>;\n\nconst LogActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogActivityOutput = z.infer<typeof LogActivityOutputSchema>;\n\nexport async function logActivity(input: LogActivityInput): Promise<LogActivityOutput> {\n    return logActivityFlow(input);\n}\n\nconst logActivityFlow = ai.defineFlow(\n  {\n    name: 'logActivityFlow',\n    inputSchema: LogActivityInputSchema,\n    outputSchema: LogActivityOutputSchema,\n  },\n  async (input) => {\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n\n    try {\n        await addDoc(collection(db, 'activityLogs'), {\n            user: {\n                uid: input.userId,\n                name: input.userName,\n                avatarUrl: input.userAvatar,\n            },\n            ipAddress: input.ipAddress,\n            userAgent: input.userAgent,\n            timestamp: serverTimestamp(),\n        });\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to log activity for user ${input.userId}:`, error);\n        return { success: false, error: `Activity logging failed: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,YAAY,KAAuB;IACrD,OAAO,gBAAgB;AAC3B;AAEA,MAAM,kBAAkB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACnC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IAEtB,IAAI;QACA,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI,iBAAiB;YACzC,MAAM;gBACF,KAAK,MAAM,MAAM;gBACjB,MAAM,MAAM,QAAQ;gBACpB,WAAW,MAAM,UAAU;YAC/B;YACA,WAAW,MAAM,SAAS;YAC1B,WAAW,MAAM,SAAS;YAC1B,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC7B;QACA,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC,CAAC,EAAE;QAClE,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yBAAyB,EAAE,MAAM,OAAO,EAAE;QAAC;IAChF;AACF;;;IAhCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["\nimport { initializeApp, getApps, getApp, deleteApp } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, serverTimestamp as firestoreServerTimestamp, enableIndexedDbPersistence, CACHE_SIZE_UNLIMITED, clearIndexedDbPersistence, terminate } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { getDatabase, ref, onValue, set, onDisconnect, serverTimestamp as rtdbServerTimestamp, goOffline, goOnline } from 'firebase/database';\nimport 'firebase/compat/firestore';\nimport firebase from 'firebase/compat/app';\n\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.NEXT_PUBLIC_FIREBASE_DATABASE_URL,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\n// Initialize Firebase\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\n\nif (!getApps().length) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\nconst rtdb = getDatabase(app);\n\n\n// Enable offline persistence\nif (typeof window !== 'undefined') {\n    try {\n        enableIndexedDbPersistence(db, {\n            cacheSizeBytes: CACHE_SIZE_UNLIMITED\n        }).catch((err) => {\n            if (err.code == 'failed-precondition') {\n                // Multiple tabs open, persistence can only be enabled\n                // in one tab at a time.\n                console.warn('Firestore persistence failed: multiple tabs open.');\n            } else if (err.code == 'unimplemented') {\n                // The current browser does not support all of the\n                // features required to enable persistence\n                console.warn('Firestore persistence not available in this browser.');\n            }\n        });\n    } catch (error) {\n        console.error(\"Error enabling Firestore persistence:\", error);\n    }\n}\n\nexport const clearCache = async () => {\n    try {\n        // Delete the firebase app to release all resources\n        await firebase.app().delete();\n        \n        // Unregister all service workers\n        if ('serviceWorker' in navigator) {\n            const registrations = await navigator.serviceWorker.getRegistrations();\n            for (const registration of registrations) {\n                await registration.unregister();\n            }\n        }\n        \n        // Clear Cache Storage\n        const keys = await caches.keys();\n        await Promise.all(keys.map(key => caches.delete(key)));\n        \n        // Clear IndexedDB for Firestore\n        const dbName = `firebase-indexeddb-main-` + firebaseConfig.appId;\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\n\n        return new Promise<void>((resolve, reject) => {\n            deleteRequest.onsuccess = () => {\n                console.log(\"Firestore IndexedDB cache cleared successfully.\");\n                resolve();\n            };\n            deleteRequest.onerror = (event) => {\n                console.error(\"Error clearing Firestore IndexedDB cache:\", event);\n                reject(new Error(\"Could not clear IndexedDB cache.\"));\n            };\n             deleteRequest.onblocked = () => {\n                console.warn(\"Clearing IndexedDB is blocked. Please close other tabs with this app open.\");\n                reject(new Error(\"Clearing cache is blocked. Close other tabs.\"));\n            };\n        });\n\n    } catch (error) {\n        console.error(\"Error during cache clearing process:\", error);\n        throw error;\n    }\n};\n\n\n// Presence management\nconst setupPresence = (userId: string) => {\n    const userStatusDatabaseRef = ref(rtdb, '/status/' + userId);\n    const userFirestoreRef = doc(db, 'users', userId);\n\n    const isOfflineForDatabase = {\n        isOnline: false,\n        lastSeen: rtdbServerTimestamp(),\n    };\n    \n    const isOnlineForDatabase = {\n        isOnline: true,\n    };\n    \n    const isOfflineForFirestore = {\n        isOnline: false,\n        lastSeen: firestoreServerTimestamp(),\n    };\n\n    const isOnlineForFirestore = {\n        isOnline: true,\n    };\n\n    const connectedRef = ref(rtdb, '.info/connected');\n    \n    const listener = onValue(connectedRef, (snap) => {\n        if (snap.val() === false) {\n            // Use setDoc with merge to avoid error if document doesn't exist yet\n            setDoc(userFirestoreRef, isOfflineForFirestore, { merge: true });\n            return;\n        }\n\n        onDisconnect(userStatusDatabaseRef).set(isOfflineForDatabase).then(() => {\n            set(userStatusDatabaseRef, isOnlineForDatabase);\n            // Use setDoc with merge here as well\n            setDoc(userFirestoreRef, isOnlineForFirestore, { merge: true });\n        });\n    });\n\n    const handleVisibilityChange = () => {\n        if (document.visibilityState === 'hidden') {\n            goOffline(rtdb);\n        } else {\n            goOnline(rtdb);\n        }\n    };\n    \n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n        document.removeEventListener('visibilitychange', handleVisibilityChange);\n        // Clean up the listener when it's no longer needed\n        // This is a placeholder as onValue returns an unsubscribe function directly\n    };\n};\n\n\nexport { app, auth, db, storage, setupPresence };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 494, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/log-suspicious-activity-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for logging suspicious login attempts to the admin panel.\n *\n * - logSuspiciousActivity - Logs the attempt with details and a face capture image.\n * - LogSuspiciousActivityInput - The input type for the function.\n * - LogSuspiciousActivityOutput - The return type for the function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore, serverTimestamp, addDoc, collection } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\nimport { initializeApp, getApps } from 'firebase-admin/app';\nimport { getDownloadURL, ref, uploadString } from 'firebase/storage';\nimport { auth as clientAuth } from '@/lib/firebase'; // Use client auth for this flow's storage part\n\nconst LogSuspiciousActivityInputSchema = z.object({\n  attemptedPin: z.string().describe('The PIN that was entered.'),\n  attemptedKey: z.string().describe('The security key that was entered.'),\n  photoDataUri: z\n    .string()\n    .describe(\n      \"A photo of the user, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type LogSuspiciousActivityInput = z.infer<typeof LogSuspiciousActivityInputSchema>;\n\nconst LogSuspiciousActivityOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type LogSuspiciousActivityOutput = z.infer<typeof LogSuspiciousActivityOutputSchema>;\n\nexport async function logSuspiciousActivity(input: LogSuspiciousActivityInput): Promise<LogSuspiciousActivityOutput> {\n    return logSuspiciousActivityFlow(input);\n}\n\nconst logSuspiciousActivityFlow = ai.defineFlow(\n  {\n    name: 'logSuspiciousActivityFlow',\n    inputSchema: LogSuspiciousActivityInputSchema,\n    outputSchema: LogSuspiciousActivityOutputSchema,\n  },\n  async (input) => {\n    // Admin SDK for Firestore\n    if (!getApps().length) {\n        initializeApp();\n    }\n    const db = getFirestore();\n    // Client SDK for Storage to upload the image\n    const storage = getStorage(clientAuth.app);\n    \n    try {\n      // 1. Upload the captured photo to Firebase Storage\n      const storageRef = ref(storage, `suspicious-logins/${Date.now()}.jpg`);\n      await uploadString(storageRef, input.photoDataUri, 'data_url');\n      const photoUrl = await getDownloadURL(storageRef);\n\n      // 2. Log the activity to Firestore\n      await addDoc(collection(db, 'suspicious-logins'), {\n        attemptedPin: input.attemptedPin,\n        attemptedKey: input.attemptedKey,\n        photoUrl: photoUrl,\n        timestamp: serverTimestamp(),\n      });\n\n      return { success: true };\n    } catch (error: any) {\n      console.error(`Failed to log suspicious activity:`, error);\n      return { success: false, error: `Suspicious activity could not be logged: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA,8MAAqD,+CAA+C;;;;;;;;;;;;;;;;;AAEpG,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO;IAClB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC5B;AAGO,eAAe,sBAAsB,KAAiC;IACzE,OAAO,0BAA0B;AACrC;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,0BAA0B;IAC1B,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;QACnB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD;IAChB;IACA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;IACtB,6CAA6C;IAC7C,MAAM,UAAU,CAAA,GAAA,wJAAA,CAAA,aAAU,AAAD,EAAE,sHAAA,CAAA,OAAU,CAAC,GAAG;IAEzC,IAAI;QACF,mDAAmD;QACnD,MAAM,aAAa,CAAA,GAAA,oLAAA,CAAA,MAAG,AAAD,EAAE,SAAS,CAAC,kBAAkB,EAAE,KAAK,GAAG,GAAG,IAAI,CAAC;QACrE,MAAM,CAAA,GAAA,oLAAA,CAAA,eAAY,AAAD,EAAE,YAAY,MAAM,YAAY,EAAE;QACnD,MAAM,WAAW,MAAM,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EAAE;QAEtC,mCAAmC;QACnC,MAAM,CAAA,GAAA,4JAAA,CAAA,SAAM,AAAD,EAAE,CAAA,GAAA,4JAAA,CAAA,aAAU,AAAD,EAAE,IAAI,sBAAsB;YAChD,cAAc,MAAM,YAAY;YAChC,cAAc,MAAM,YAAY;YAChC,UAAU;YACV,WAAW,CAAA,GAAA,4JAAA,CAAA,kBAAe,AAAD;QAC3B;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,CAAC,kCAAkC,CAAC,EAAE;QACpD,OAAO;YAAE,SAAS;YAAO,OAAO,CAAC,yCAAyC,EAAE,MAAM,OAAO,EAAE;QAAC;IAC9F;AACF;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/delete-user-data-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for completely deleting a user and all their associated data.\n *\n * - deleteUserData - Deletes a user's profile, posts, storage files, conversations, and auth record.\n * - DeleteUserDataInput - The input type for the deleteUserData function.\n * - DeleteUserDataOutput - The return type for the deleteUserData function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\nimport { initializeApp, getApps } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\n\n\nconst DeleteUserDataInputSchema = z.object({\n  userId: z.string().describe('The UID of the user to be deleted.'),\n});\nexport type DeleteUserDataInput = z.infer<typeof DeleteUserDataInputSchema>;\n\nconst DeleteUserDataOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type DeleteUserDataOutput = z.infer<typeof DeleteUserDataOutputSchema>;\n\n\nexport async function deleteUserData(input: DeleteUserDataInput): Promise<DeleteUserDataOutput> {\n    return deleteUserDataFlow(input);\n}\n\n\nconst deleteUserDataFlow = ai.defineFlow(\n  {\n    name: 'deleteUserDataFlow',\n    inputSchema: DeleteUserDataInputSchema,\n    outputSchema: DeleteUserDataOutputSchema,\n  },\n  async ({ userId }) => {\n    \n    // Initialize Firebase Admin SDK if not already initialized\n    if (!getApps().length) {\n        initializeApp();\n    }\n    \n    const db = getFirestore();\n    const storage = getStorage();\n    const auth = getAuth();\n\n    if (!userId) {\n        return { success: false, error: 'Kullanıcı ID\\'si sağlanmadı.' };\n    }\n\n    try {\n        const batch = db.batch();\n\n        // 1. Delete user's posts and associated storage files\n        const postsQuery = db.collection('posts').where('authorId', '==', userId);\n        const postsSnapshot = await postsQuery.get();\n        for (const postDoc of postsSnapshot.docs) {\n            const postData = postDoc.data();\n            if (postData.type === 'photo' && postData.url) {\n                try {\n                    const fileUrl = new URL(postData.url);\n                    const filePath = decodeURIComponent(fileUrl.pathname.split('/o/')[1]);\n                    const fileRef = storage.bucket().file(filePath);\n                    await fileRef.delete();\n                } catch (error: any) {\n                    // It's okay if the file doesn't exist (e.g. already deleted, or bad URL)\n                    if (error.code !== 404) { // GCS not found code\n                        console.warn(`Could not delete storage file for post ${postDoc.id}:`, error);\n                    }\n                }\n            }\n             // Delete subcollections like comments and likes (if they exist)\n            const commentsRef = db.collection('posts').doc(postDoc.id).collection('comments');\n            const likesRef = db.collection('posts').doc(postDoc.id).collection('likes');\n            const commentsSnapshot = await commentsRef.get();\n            const likesSnapshot = await likesRef.get();\n            commentsSnapshot.forEach(doc => batch.delete(doc.ref));\n            likesSnapshot.forEach(doc => batch.delete(doc.ref));\n\n            batch.delete(postDoc.ref);\n        }\n\n        // 2. Delete user's conversations\n        const conversationsQuery = db.collection('conversations').where('users', 'array-contains', userId);\n        const conversationsSnapshot = await conversationsQuery.get();\n        for (const convoDoc of conversationsSnapshot.docs) {\n            // Delete all messages in the conversation's subcollection\n            const messagesRef = db.collection('conversations').doc(convoDoc.id).collection('messages');\n            const messagesSnapshot = await messagesRef.get();\n            messagesSnapshot.forEach(messageDoc => {\n                batch.delete(messageDoc.ref);\n            });\n            // Delete the conversation document itself\n            batch.delete(convoDoc.ref);\n        }\n        \n        // 3. Delete the user document from Firestore and its subcollections\n        const userDocRef = db.collection('users').doc(userId);\n        \n        // Delete user's own subcollections\n        const followersRef = userDocRef.collection('followers');\n        const followingRef = userDocRef.collection('following');\n        const galleryPermsRef = userDocRef.collection('galleryPermissions');\n        \n        const [followersSnap, followingSnap, galleryPermsSnap] = await Promise.all([\n            followersRef.get(),\n            followingRef.get(),\n            galleryPermsRef.get()\n        ]);\n\n        followersSnap.forEach(doc => batch.delete(doc.ref));\n        followingSnap.forEach(doc => batch.delete(doc.ref));\n        galleryPermsSnap.forEach(doc => batch.delete(doc.ref));\n        \n        // Finally, delete the user document itself\n        batch.delete(userDocRef);\n\n        // Commit all batched Firestore deletions\n        await batch.commit();\n\n        // 4. Delete the user from Firebase Authentication\n        await auth.deleteUser(userId);\n\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to delete user ${userId}:`, error);\n        return { success: false, error: `Hesap silinirken bir hata oluştu: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 746, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/admin/users/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logActivity as '4089b26089702b1e5adfebade7e2643cec0eef947b'} from 'ACTIONS_MODULE0'\nexport {logSuspiciousActivity as '40680b24048d25ecd6783caec7cb78d07ae0bb6343'} from 'ACTIONS_MODULE1'\nexport {deleteUserData as '4076365984dec01c64a5fd543a3b6e6674f10ecaec'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 851, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/admin/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/admin/users/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/admin/users/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 865, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/admin/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/admin/users/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/admin/users/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 879, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}