{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["/**\n * @fileoverview This file initializes and configures the Genkit AI library.\n * It sets up the necessary plugins, in this case, the Google AI plugin for generative models.\n * It exports a configured `ai` object that can be used throughout the application to define\n * and run AI flows, prompts, and tools.\n */\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport {firebase} from \"firebase-admin/lib/firebase-namespace-api\";\nimport App = firebase.app.App;\n\nexport const ai = genkit({\n  plugins: [\n    googleAI({\n      // The Gemini API key is currently read from the `GEMINI_API_KEY`\n      // environment variable.\n    }),\n  ],\n  // Flows are now auto-registered, so we don't need to list them here.\n  // This breaks the circular dependency between this file and the flow files.\n  flows: [],\n});\n"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AAAA;AACA;AAAA;;;AAIO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QAGT;KACD;IACD,qEAAqE;IACrE,4EAA4E;IAC5E,OAAO,EAAE;AACX","debugId":null}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/delete-user-data-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A Genkit flow for completely deleting a user and all their associated data.\n *\n * - deleteUserData - Deletes a user's profile, posts, storage files, conversations, and auth record.\n * - DeleteUserDataInput - The input type for the deleteUserData function.\n * - DeleteUserDataOutput - The return type for the deleteUserData function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\nimport { initializeApp, getApps } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\n\n\nconst DeleteUserDataInputSchema = z.object({\n  userId: z.string().describe('The UID of the user to be deleted.'),\n});\nexport type DeleteUserDataInput = z.infer<typeof DeleteUserDataInputSchema>;\n\nconst DeleteUserDataOutputSchema = z.object({\n  success: z.boolean(),\n  error: z.string().optional(),\n});\nexport type DeleteUserDataOutput = z.infer<typeof DeleteUserDataOutputSchema>;\n\n\nexport async function deleteUserData(input: DeleteUserDataInput): Promise<DeleteUserDataOutput> {\n    return deleteUserDataFlow(input);\n}\n\n\nconst deleteUserDataFlow = ai.defineFlow(\n  {\n    name: 'deleteUserDataFlow',\n    inputSchema: DeleteUserDataInputSchema,\n    outputSchema: DeleteUserDataOutputSchema,\n  },\n  async ({ userId }) => {\n    \n    // Initialize Firebase Admin SDK if not already initialized\n    if (!getApps().length) {\n        initializeApp();\n    }\n    \n    const db = getFirestore();\n    const storage = getStorage();\n    const auth = getAuth();\n\n    if (!userId) {\n        return { success: false, error: 'Kullanıcı ID\\'si sağlanmadı.' };\n    }\n\n    try {\n        const batch = db.batch();\n\n        // 1. Delete user's posts and associated storage files\n        const postsQuery = db.collection('posts').where('authorId', '==', userId);\n        const postsSnapshot = await postsQuery.get();\n        for (const postDoc of postsSnapshot.docs) {\n            const postData = postDoc.data();\n            if (postData.type === 'photo' && postData.url) {\n                try {\n                    // Extract the file path from the URL\n                    const decodedUrl = decodeURIComponent(postData.url);\n                    const pathName = new URL(decodedUrl).pathname;\n                    const filePath = pathName.substring(pathName.indexOf('/o/') + 3).split('?')[0];\n\n                    if(filePath) {\n                       const storageRef = storage.bucket().file(filePath);\n                       await storageRef.delete();\n                    }\n                } catch (error: any) {\n                    // It's okay if the file doesn't exist.\n                    if (error.code !== 404) { // GCS not found code\n                        console.warn(`Could not delete storage file ${postData.url}:`, error);\n                    }\n                }\n            }\n             // Delete subcollections like comments and likes (if they exist)\n            const commentsRef = db.collection('posts').doc(postDoc.id).collection('comments');\n            const likesRef = db.collection('posts').doc(postDoc.id).collection('likes');\n            const commentsSnapshot = await commentsRef.get();\n            const likesSnapshot = await likesRef.get();\n            commentsSnapshot.forEach(doc => batch.delete(doc.ref));\n            likesSnapshot.forEach(doc => batch.delete(doc.ref));\n\n            batch.delete(postDoc.ref);\n        }\n\n        // 2. Delete user's conversations\n        const conversationsQuery = db.collection('conversations').where('users', 'array-contains', userId);\n        const conversationsSnapshot = await conversationsQuery.get();\n        for (const convoDoc of conversationsSnapshot.docs) {\n            // Delete all messages in the conversation's subcollection\n            const messagesRef = db.collection('conversations').doc(convoDoc.id).collection('messages');\n            const messagesSnapshot = await messagesRef.get();\n            messagesSnapshot.forEach(messageDoc => {\n                batch.delete(messageDoc.ref);\n            });\n            // Delete the conversation document itself\n            batch.delete(convoDoc.ref);\n        }\n        \n        // 3. Delete the user document from Firestore\n        const userDocRef = db.collection('users').doc(userId);\n        batch.delete(userDocRef);\n        \n        // Delete user's own subcollections\n        const followersRef = userDocRef.collection('followers');\n        const followingRef = userDocRef.collection('following');\n        const galleryPermsRef = userDocRef.collection('galleryPermissions');\n        \n        const [followersSnap, followingSnap, galleryPermsSnap] = await Promise.all([\n            followersRef.get(),\n            followingRef.get(),\n            galleryPermsRef.get()\n        ]);\n\n        followersSnap.forEach(doc => batch.delete(doc.ref));\n        followingSnap.forEach(doc => batch.delete(doc.ref));\n        galleryPermsSnap.forEach(doc => batch.delete(doc.ref));\n\n        // Commit all batched Firestore deletions\n        await batch.commit();\n\n        // 4. Delete the user from Firebase Authentication\n        await auth.deleteUser(userId);\n\n        return { success: true };\n    } catch (error: any) {\n        console.error(`Failed to delete user ${userId}:`, error);\n        return { success: false, error: `Hesap silinirken bir hata oluştu: ${error.message}` };\n    }\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28app%29/profile/edit/users/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {deleteUserData as '4076365984dec01c64a5fd543a3b6e6674f10ecaec'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/profile/edit/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/profile/edit/users/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/profile/edit/users/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6S,GAC1U,2EACA","debugId":null}},
    {"offset": {"line": 527, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28app%29/profile/edit/users/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/profile/edit/users/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/profile/edit/users/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}